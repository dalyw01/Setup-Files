    #------------------------------------------------------------------------
    # General tips for setting it up
    #------------------------------------------------------------------------
  
    Set up your cucumber.yml file AT(!) the following
  
    /Users/dalyw01/Desktop/Test/Cucumber/config
    MC-S104581:config dalyw01$ ls
    cucumber.yml
  
    Set up your cucumber.yml file WITH(!) the following
  
    default: BROWSER=chrome
    firefox: BROWSER=firefox
    safari: BROWSER=safari
  
    Some examples of running it with the new env variables set from the .yml file
  
    cucumber features/errors_checker.feature:19 -p default
    cucumber features/errors_checker.feature:19 -p firefox
    cucumber features/errors_checker.feature -p safari --tags @FLASH
  
    #------------------------------------------------------------------------
    # General commands with a browser
    #------------------------------------------------------------------------

    visit( 'http://www.google.co.uk')

    sleep(2)

    if page.driver.browser.browser == :firefox
      page.driver.browser.manage.window.maximize()
    elsif page.driver.browser.browser == :chrome
      page.driver.browser.manage.window.resize_to(1440, 800) # Chrome doesn't maximize() too good so used this instead
    end

    page.driver.browser.manage.window.maximize()
    page.driver.browser.manage.window.resize_to( 1440, 800 )
  
    #------------------------------------------------------------------------
    # Opening a new tab
    #------------------------------------------------------------------------  

    within_window open_new_window do
        visit( 'http://google.co.uk' )
    end

    within_window open_new_window do
        visit( text )
    end

    #------------------------------------------------------------------------
    # Clicking elements
    #------------------------------------------------------------------------

    page.first('#derp').click                           # derp    is a button with an ID
    page.first(".p_ctaIcon").click                      # ctaIcon is a button with a CLASS

    click_link "Cucumber - Wikipedia"                   # First listed result from a Google search query
    click_link( "Opt in to the HTML5 Player" )          # Another example of using click LINK

    # Using table from Scenario Outline
    When(/^I click on error code - "([^"]*)"$/) do |new_code|
      if new_code == "1005" or new_code == "3024"
        page.first( "a" , text: new_code ).click
      end
    end
  
    # Click every button on CookBook 
    page.all(:css, '.refbutton').each do |item|
      puts item.click
    end

    find('a.pr-xs-3', :text => 'Shoes').click           # "Shoes" is text for an "a" element link under CLASS pr-xs-3
    find("span", text: "Flash").click
    find( "a" , text: new_code ).click

    # Clicks on every single BUTTON in the class .refButton
    page.all(:css, '.refbutton').each do |item|
      puts item.click
    end
  
    # Clicks on every single li in the class .p_volumeBar
    page.all(:css, '.p_volumeBar').each do |item|
      item.click
      new_array.push( item.native.css_value('left') ) # Gets the css proprty "left" for the current item
    end

    # Flash players
    page.first('#smp-flashSWFmp').click

    #------------------------------------------------------------------------
    # Verifying content exists on a page
    #------------------------------------------------------------------------

    find('#seek_in_halves').hover                       # Hover over button
    find( "a" , text: "Opt out of the HTML5 Player" )   # Good to verify something exists on a page
    find('a.pr-xs-3', :text => 'Shoes').hover           # Hover over certain link in CLASS pr-xs-3
    find("h1").should have_content("Shoes")             # If you expect a certain element to have certain text

    expect(page).to have_css("#generated_errors td", text: new_error_message )  # Expecting page to have certain text inside a certain div + tag
    expect(page).to have_css("#generated_errors a" , text: new_playlist )
  
    page.should have_content('lolacopterdaly')          # From ETSY, a field is populated from firstname + lastname fields
    expect(page).to have_title "Cucumber - Wikipedia"   # This is just part of the actual title "Cucumber - Wikipedia, the free encyclopedia"

    page.all(".refbutton").count                        # Counts every instance of the class .refbutton
    page.all("li").count                                # Counts all li elements on page
    page.all(".pl-xs-0 li").count                       # Number of li elements INSIDE the class .pl-xs-0
    page.all(".pl-xs-0 li").count.should eql(8)         # Different way instead of using IF statement

    assert_selector('div.heading', text: 'Create an Etsy account and start shopping') # This checks a specific class with name "heading"
    assert_selector('div#test', text: '')                                             # This checks a specific id with name "test", haven't tried it yet!

    #------------------------------------------------------------------------
    # Copy + Pasting
    #------------------------------------------------------------------------

    div_text = find('.recipe-share').text()        # To copy the word next to the input field
    div_text = find('.recipe-share input').text()  # To copy what's in the field
    find('#orb-search-q').set(div_text)            # This is buggy when pasting URLs
  
    #------------------------------------------------------------------------
    # Specifying actions within an iFrame
    #------------------------------------------------------------------------

    within_frame 'smpj2ooiframemedia_player' do    # This is an id
      page.first(".p_ctaIcon").click               # Click class
    end

    #------------------------------------------------------------------------
    # Keyboard commands
    #------------------------------------------------------------------------
    # https://docs.omniref.com/ruby/gems/frameworks-capybara/0.2.18/symbols/SendKeys
    # Quick examples below!

    find(:id, 'smpj2ooiframemedia_player').native.send_keys(:tab)
    find(:id, 'smpj2ooiframemedia_player').native.send_keys(:arrow_down)
    find(:id, 'smpj2ooiframemedia_player').native.send_keys(:arrow_up)
    find(:id, 'smpj2ooiframemedia_player').native.send_keys(:enter)
    
    # Here's an example of hooking onto ID and tabbing from there!
    find(:id, 'first-name').native.send_keys(:tab)
    fill_in 'last_name', :with => "DALY"

    #------------------------------------------------------------------------
    # Text-fields (Example from google.co.uk)
    #------------------------------------------------------------------------

    When( /^I am on Google$/ ) do
        fill_in 'q', :with => "cucumber\n" # q is the text-box
    end                                    # \n is equivalent to pressing ENTER

    # (Example from https://www.etsy.com/uk/join)
    
    When(/^I enter all the fields with valid data$/) do
      page.first('#first-name').click
      fill_in 'first_name', :with => "LOLACOPTER" # Don't have /n as it prompts errors to finish other fields in the form
    end

    #------------------------------------------------------------------------
    # Executing Javascript
    #------------------------------------------------------------------------

    page.execute_script('embeddedMedia.players[0].play();')
    page.execute_script( 'mediaPlayer.updateUiConfig({"controls": {"always": "true"}});')
    page.execute_script( 'alert("Here is an alert!");')
    
    page.driver.browser.switch_to.alert.accept
    
    
    page.execute_script( 'var volume_div = document.getElementById("button_menu");
                          volume_div.innerHTML += "<p> "+ mediaPlayer.volume() + "</p>";' )


    final_volume = page.execute_script( 'return(mediaPlayer.volume() );')

    # If its MUTED then UNMUTE it by pressing ENTER on the VOLUME icon
    if ( page.execute_script('return(mediaPlayer.muted());') == true )
      find(:id, 'smpj2ooiframemedia_player').native.send_keys(:enter)
      sleep(1)
    end

    #------------------------------------------------------------------------
    # Chunk of code to add into env.rb file to stop killing browser session
    #------------------------------------------------------------------------

    Capybara::Selenium::Driver.class_eval do
      def quit
        puts "Press RETURN to quit the browser"
        $stdin.gets
        @browser.quit
      rescue Errno::ECONNREFUSED
        # Browser must have already gone
      end
    end

    #------------------------------------------------------------------------
    # Ruby ASSERTS 
    #------------------------------------------------------------------------
    # Like -> https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    # Quick examples below!
  
    final_volume = page.execute_script( 'return(mediaPlayer.volume() );')
  
    expect(final_volume).to eq(1)
    expect(final_volume).to be_between(0.9, 1.1).inclusive
    expect(final_volume).to be_between(0.9, 1.1)
expect(final_volume).to be <= 1
